{
	"info": {
		"_postman_id": "2ae16552-5ba0-43d1-b9f2-d9053724c710",
		"name": "CSC425-Term-CRUD-Operations",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39367937"
	},
	"item": [
		{
			"name": "Community Posts",
			"item": [
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in event organizer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"frank.green@example.com\",\n    \"password\": \"greenpass789\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite test user to existing event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if the response is an object",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    // Check if response contains invitation_id and that it is a number",
									"    pm.expect(responseData).to.have.property('invitation_id').that.is.a('number');",
									"    ",
									"    // Optional: Check if invitation_id is the expected value or within a valid range",
									"    pm.expect(responseData.invitation_id).to.be.greaterThan(0);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"// Store invitation_id as a collection variable",
									"pm.collectionVariables.set(\"invitation_id\", responseData.invitation_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": 1,\n    \"email\": \"example@example.com\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/invitations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of event organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
									"});",
									"",
									"// Test that the cookie was cleared",
									"pm.test(\"Token cookie should be cleared\", function () {",
									"    const cookies = pm.cookies;",
									"    pm.expect(cookies.has('token')).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in invited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update invitation from event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response time is less than 200ms",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Validate the structure and types of the response body",
									"pm.test(\"Validate the response body of PUT method\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Accepted\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/invitations/{{invitation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations",
								"{{invitation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts from event 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check that response has a \"data\" property and it is an array",
									"pm.test(\"Response contains 'data' array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
									"});",
									"",
									"// Check that the \"data\" array has at least one post (optional)",
									"pm.test(\"'data' array has posts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Validate that each post has the expected structure",
									"pm.test(\"Each post has correct properties and types\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.data.forEach(post => {",
									"        pm.expect(post).to.have.property(\"post_id\").that.is.a(\"number\");",
									"        pm.expect(post).to.have.property(\"event_id\").that.is.a(\"number\");",
									"        pm.expect(post).to.have.property(\"user_id\").that.is.a(\"number\");",
									"        pm.expect(post).to.have.property(\"content\").that.is.a(\"string\");",
									"        pm.expect(post).to.have.property(\"created_at\").that.is.a(\"string\");",
									"        pm.expect(post).to.have.property(\"user_name\").that.is.a(\"string\");",
									"        pm.expect(post).to.have.property(\"event_name\").that.is.a(\"string\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events/1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new post in event 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has post_id and success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"post_id\");",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Post created successfully\");",
									"    ",
									"    // Store the post_id in a collection variable",
									"    pm.collectionVariables.set(\"post_id\", jsonData.post_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\" : 1,\n    \"content\" : \"Hello everyone! I'm so excted for tis evnt!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit post in event 1",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\" : \"Hello everyone! I'm so excited for this event!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/posts/{{post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posts again from event 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events/1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invitations",
			"item": [
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in event organizer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"frank.green@example.com\",\n    \"password\": \"greenpass789\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all invitations from event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    responseData.data.forEach(function(invitation) {",
									"        pm.expect(invitation).to.have.property('invitation_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('event_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('user_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('sent_date').that.is.a('string');",
									"        pm.expect(invitation).to.have.property('status').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events/1/invitations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"1",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invite test user to existing event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if the response is an object",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    // Check if response contains invitation_id and that it is a number",
									"    pm.expect(responseData).to.have.property('invitation_id').that.is.a('number');",
									"    ",
									"    // Optional: Check if invitation_id is the expected value or within a valid range",
									"    pm.expect(responseData.invitation_id).to.be.greaterThan(0);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"// Store invitation_id as a collection variable",
									"pm.collectionVariables.set(\"invitation_id\", responseData.invitation_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event_id\": 1,\n    \"email\": \"example@example.com\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/invitations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout of event organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
									"});",
									"",
									"// Test that the cookie was cleared",
									"pm.test(\"Token cookie should be cleared\", function () {",
									"    const cookies = pm.cookies;",
									"    pm.expect(cookies.has('token')).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in invited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all invitations for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    responseData.data.forEach(function(invitation) {",
									"        pm.expect(invitation).to.have.property('invitation_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('event_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('user_id').that.is.a('number');",
									"        pm.expect(invitation).to.have.property('sent_date').that.is.a('string');",
									"        pm.expect(invitation).to.have.property('status').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/invitations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update invitation from event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response time is less than 200ms",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Validate the structure and types of the response body",
									"pm.test(\"Validate the response body of PUT method\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Accepted\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/invitations/{{invitation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations",
								"{{invitation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete invitation from event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate HTTP status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response time is less than 200ms",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Validate the structure and types of the response body",
									"pm.test(\"Validate the response body of DEL method\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/invitations/{{invitation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"invitations",
								"{{invitation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    responseData.data.forEach(function(events) {",
									"        pm.expect(events).to.have.property('event_id').that.is.a('number');",
									"        pm.expect(events).to.have.property('venue_id').that.is.a('number');",
									"        pm.expect(events).to.have.property('organizer_id').that.is.a('number');",
									"        pm.expect(events).to.have.property('name').that.is.a('string');",
									"        pm.expect(events).to.have.property('description').that.is.a('string');",
									"        pm.expect(events).to.have.property('event_date_start').that.is.a('string');",
									"        pm.expect(events).to.have.property('event_date_end').that.is.a('string');",
									"        pm.expect(events).to.have.property('created_at').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response contains success message and rental_id",
									"pm.test(\"Rental created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Rental created successfully\");",
									"    pm.expect(jsonData).to.have.property(\"rental_id\");",
									"    ",
									"    // Store rental_id for future tests if needed",
									"    pm.collectionVariables.set(\"rental_id\", jsonData.rental_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": 1,\n    \"start_date\": \"2025-01-29\",\n    \"end_date\": \"2025-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venue_rentals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venue_rentals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an event from rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Event created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"message\", \"Event created successfully\");",
									"    pm.expect(responseJson).to.have.property(\"event_id\");",
									"",
									"    // Store event_id in collection variables for future use",
									"    pm.collectionVariables.set(\"event_id\", responseJson.event_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": 1, // Ensure this is for a venue where the user is an owner or renter\n    \"name\": \"Annual Meetup\",\n    \"description\": \"An exciting annual gathering of enthusiasts.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a rental event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event updated successfully\", function () {",
									"  const jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Event updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Event Name\",\n  \"description\": \"Updated description of the event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Event deleted successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Venue created successfully\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.have.property(\"message\", \"Venue created successfully\");",
									"  pm.expect(responseJson).to.have.property(\"venue_id\");",
									"",
									"  // Store venue_id in collection variable",
									"  pm.collectionVariables.set(\"venue_id\", responseJson.venue_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"The Grand Hall\",\n  \"location\": \"123 Venue St, Cityville\",\n  \"description\": \"A spacious hall ideal for weddings and large events.\",\n  \"capacity\": 200,\n  \"price\": 1500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an event from owned venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Event created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"message\", \"Event created successfully\");",
									"    pm.expect(responseJson).to.have.property(\"event_id\");",
									"",
									"    // Store event_id in collection variables for future use",
									"    pm.collectionVariables.set(\"event_id\", responseJson.event_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": \"{{venue_id}}\", // Ensure this is for a venue where the user is an owner or renter\n    \"name\": \"Annual Meetup\",\n    \"description\": \"An exciting annual gathering of enthusiasts.\",\n    \"start_date\" : \"2024-12-21\",\n    \"end_date\" : \"2024-12-21\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update owned venue event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event updated successfully\", function () {",
									"  const jsonData = pm.response.json();",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Event updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New Event Name\",\n  \"description\": \"Updated event details by owner\",\n  \"event_date_start\": \"2025-02-01\",\n  \"event_date_end\": \"2025-02-03\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Event deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Event deleted successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/events/{{event_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Availability",
			"item": [
				{
					"name": "Get availability dates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/available_dates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"available_dates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Venue created successfully\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.have.property(\"message\", \"Venue created successfully\");",
									"  pm.expect(responseJson).to.have.property(\"venue_id\");",
									"",
									"  // Store venue_id in collection variable",
									"  pm.collectionVariables.set(\"venue_id\", responseJson.venue_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"The Grand Hall\",\n  \"location\": \"123 Venue St, Cityville\",\n  \"description\": \"A spacious hall ideal for weddings and large events.\",\n  \"capacity\": 200,\n  \"price\": 1500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new venue dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Available date created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Available date created successfully\");",
									"    pm.expect(jsonData).to.have.property(\"availability_id\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"availability_id\", jsonData.availability_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"venue_id\": \"{{venue_id}}\",\n  \"available_date\": \"2024-11-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/available_dates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"available_dates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update venue dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Availability date updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Availability date updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": \"{{venue_id}}\",\n    \"available_date\": \"2025-02-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/available_dates/{{availability_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"available_dates",
								"{{availability_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete venue dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Availability date deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Availability date deleted successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/available_dates/{{availability_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"available_dates",
								"{{availability_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response confirms deletion",
									"pm.test(\"Venue deleted successfully\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.have.property(\"message\", \"Venue deleted successfully\");",
									"});",
									"",
									"// Remove the venue_id from collection variables after deletion",
									"pm.collectionVariables.unset(\"venue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/venues/{{venue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Venues",
			"item": [
				{
					"name": "Get all venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    responseData.data.forEach(function(venues) {",
									"        pm.expect(venues).to.have.property('venue_id').that.is.a('number');",
									"        pm.expect(venues).to.have.property('name').that.is.a('string');",
									"        pm.expect(venues).to.have.property('location').that.is.a('string');",
									"        pm.expect(venues).to.have.property('description').that.is.a('string');",
									"        pm.expect(venues).to.have.property('capacity').that.is.a('number');",
									"        pm.expect(venues).to.have.property('price').that.is.a('number');",
									"        pm.expect(venues).to.have.property('created_at').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Venue created successfully\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.have.property(\"message\", \"Venue created successfully\");",
									"  pm.expect(responseJson).to.have.property(\"venue_id\");",
									"",
									"  // Store venue_id in collection variable",
									"  pm.collectionVariables.set(\"venue_id\", responseJson.venue_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"The Grand Hall\",\n  \"location\": \"123 Venue St, Cityville\",\n  \"description\": \"A spacious hall ideal for weddings and large events.\",\n  \"capacity\": 200,\n  \"price\": 1500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new venue with missing data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains correct error message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"error\", \"All fields (name, location, description, capacity, price) are required.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update new venue info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Venue updated successfully message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"Venue updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Venue Name\",\n  \"location\": \"Updated Location\",\n  \"description\": \"This is the updated description.\",\n  \"capacity\": 200,\n  \"price\": 150.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues/{{venue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response confirms deletion",
									"pm.test(\"Venue deleted successfully\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.have.property(\"message\", \"Venue deleted successfully\");",
									"});",
									"",
									"// Remove the venue_id from collection variables after deletion",
									"pm.collectionVariables.unset(\"venue_id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/venues/{{venue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized create venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has correct error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Access denied. No token provided.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rentals",
			"item": [
				{
					"name": "Get all user rentals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    responseData.data.forEach(function(venues) {",
									"        pm.expect(venues).to.have.property('rental_id').that.is.a('number');",
									"        pm.expect(venues).to.have.property('user_id').that.is.a('number');",
									"        pm.expect(venues).to.have.property('venue_id').that.is.a('number');",
									"        pm.expect(venues).to.have.property('start_date').that.is.a('string');",
									"        pm.expect(venues).to.have.property('end_date').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/venue_rentals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venue_rentals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 201 Created",
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the registration success message",
									"pm.test(\"Registration successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"// Check that the response contains a user_id",
									"pm.test(\"User ID is returned\", () => {",
									"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login in new test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the login success message",
									"pm.test(\"Login successful message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
									"});",
									"",
									"// Check that the token cookie is set",
									"pm.test(\"Token cookie is present\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response contains success message and rental_id",
									"pm.test(\"Rental created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Rental created successfully\");",
									"    pm.expect(jsonData).to.have.property(\"rental_id\");",
									"    ",
									"    // Store rental_id for future tests if needed",
									"    pm.collectionVariables.set(\"rental_id\", jsonData.rental_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"venue_id\": 1,\n    \"start_date\": \"2025-01-29\",\n    \"end_date\": \"2025-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venue_rentals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venue_rentals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response contains success message",
									"pm.test(\"Rental updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Venue rental updated successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"start_date\": \"2025-01-30\",\n  \"end_date\": \"2025-01-31\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/venue_rentals/{{rental_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venue_rentals",
								"{{rental_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete rental",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check that the response body contains the expected success message",
									"pm.test(\"Rental deleted successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Rental deleted successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/venue_rentals/{{rental_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"venue_rentals",
								"{{rental_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check that the response status is 200 OK",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"",
									"// Parse the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Check for the user deletion success message",
									"pm.test(\"User deletion message is correct\", () => {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
									"});",
									"",
									"// Verify that the token cookie is cleared",
									"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
									"    const tokenCookie = pm.cookies.get(\"token\");",
									"    pm.expect(tokenCookie).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Existing Users",
					"item": [
						{
							"name": "Venue Owners",
							"item": [
								{
									"name": "Login in owner 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"alice.smith@example.com\",\n    \"password\": \"password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in owner 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"bob.johnson@example.com\",\n    \"password\": \"securepass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in owner 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"carol.white@example.com\",\n    \"password\": \"anotherpass789\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in owner 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"david.lee@example.com\",\n    \"password\": \"mypass1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in owner 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"eva.adams@example.com\",\n    \"password\": \"evaeva123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Venue Renters",
							"item": [
								{
									"name": "Login in renter 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"frank.green@example.com\",\n    \"password\": \"greenpass789\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in renter 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"grace.hall@example.com\",\n    \"password\": \"gracepass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in renter 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"hank.young@example.com\",\n    \"password\": \"hankpass123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in renter 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"isla.brown@example.com\",\n    \"password\": \"brown1234\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in renter 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"jack.king@example.com\",\n    \"password\": \"king123pass\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Attendees",
							"item": [
								{
									"name": "Login in attendee 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"lily.scott@example.com\",\n    \"password\": \"lilypass789\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"mason.price@example.com\",\n    \"password\": \"pricepass456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"nina.bell@example.com\",\n    \"password\": \"bellpass123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"owen.ward@example.com\",\n    \"password\": \"owenpass321\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"paula.ross@example.com\",\n    \"password\": \"paulapass987\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"quincy.rivera@example.com\",\n    \"password\": \"quincypass555\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"rachel.cook@example.com\",\n    \"password\": \"cookpass123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"sam.gray@example.com\",\n    \"password\": \"graypass999\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 9",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"tina.perez@example.com\",\n    \"password\": \"tinapass777\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"umar.blake@example.com\",\n    \"password\": \"umarpass333\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 11",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"vera.hunt@example.com\",\n    \"password\": \"verapass888\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 12",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"will.nash@example.com\",\n    \"password\": \"willpass444\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 13",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"xena.rose@example.com\",\n    \"password\": \"xenapass555\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 14",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"yara.diaz@example.com\",\n    \"password\": \"yarapass555\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Login in attendee 15",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the response status is 200 OK",
													"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
													"",
													"// Parse the response JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Check for the login success message",
													"pm.test(\"Login successful message is correct\", () => {",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
													"});",
													"",
													"// Check that the token cookie is set",
													"pm.test(\"Token cookie is present\", () => {",
													"    const tokenCookie = pm.cookies.get(\"token\");",
													"    pm.expect(tokenCookie).to.not.be.undefined;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"zane.cruz@example.com\",\n    \"password\": \"zanepass222\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Logout of user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful logout",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
											"});",
											"",
											"// Test that the cookie was cleared",
											"pm.test(\"Token cookie should be cleared\", function () {",
											"    const cookies = pm.cookies;",
											"    pm.expect(cookies.has('token')).to.be.false;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Basic User Action",
					"item": [
						{
							"name": "Create new test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 201 Created",
											"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Check for the registration success message",
											"pm.test(\"Registration successful message is correct\", () => {",
											"    pm.expect(jsonData).to.have.property(\"message\", \"User registered successfully\");",
											"});",
											"",
											"// Check that the response contains a user_id",
											"pm.test(\"User ID is returned\", () => {",
											"    pm.expect(jsonData).to.have.property(\"user_id\").that.is.a(\"number\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user with same email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property(\"error\", \"Email already registered. Please use a different email.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Example User\",\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message is about invalid name\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Name can only contain alphabetic characters and spaces.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Invalid User<>\",\n    \"email\": \"invalid@example.com\",\n    \"password\": \"invalidpassword\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user with missing fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property(\"error\", \"All fields (name, email, password) are required.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login in new test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 200 OK",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Check for the login success message",
											"pm.test(\"Login successful message is correct\", () => {",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
											"});",
											"",
											"// Check that the token cookie is set",
											"pm.test(\"Token cookie is present\", () => {",
											"    const tokenCookie = pm.cookies.get(\"token\");",
											"    pm.expect(tokenCookie).to.not.be.undefined;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"testpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login in with invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for error response when user is not found",
											"pm.test(\"Status code is 404 if user is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Response contains error message for user not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"User not found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"0@example.com\",\n    \"password\": \"notapassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login in with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for error response when password is incorrect",
											"pm.test(\"Status code is 400 if password is incorrect\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains error message for incorrect password\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"notapassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 200 OK",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Verify required fields and types",
											"const expectedFields = {",
											"    user_id: \"number\",",
											"    name: \"string\",",
											"    email: \"string\",",
											"    created_at: \"string\"",
											"};",
											"",
											"Object.keys(expectedFields).forEach(field => {",
											"    pm.test(`Response has ${field} of type ${expectedFields[field]}`, () => {",
											"        pm.expect(jsonData).to.have.property(field);",
											"        pm.expect(jsonData[field]).to.be.a(expectedFields[field]);",
											"    });",
											"});",
											"",
											"// Optional: Check for specific email value",
											"pm.test(\"Email is correct\", () => pm.expect(jsonData.email).to.equal(\"example@example.com\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property(\"message\", \"User profile updated successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Name\",\n  \"email\": \"updated@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user profile with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message is about invalid name\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Name can only contain alphabetic characters and spaces.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Name<>\",\n  \"email\": \"updated@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user profile with missing data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message is about invalid name\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Both name and email are required\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user profile with already existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Correct error message for existing email\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.error).to.eql(\"Email already in use. Please choose a different email.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Name\",\n  \"email\": \"frank.green@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful password update",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Password updated successfully\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oldPassword\": \"testpassword\",\n  \"newPassword\": \"newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me/password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password with invalid old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for error response when old password is incorrect",
											"pm.test(\"Status code is 400 if old password is incorrect\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response contains error message for incorrect old password\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Old password is incorrect\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oldPassword\": \"testpassword\",\n  \"newPassword\": \"newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me/password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user password with missing data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for error response when old password is missing",
											"pm.test(\"Status code is 400 if old password is missing\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Response contains error message for missing old password\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Both oldPassword and newPassword are required\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/users/me/password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout of user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful logout",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
											"});",
											"",
											"// Test that the cookie was cleared",
											"pm.test(\"Token cookie should be cleared\", function () {",
											"    const cookies = pm.cookies;",
											"    pm.expect(cookies.has('token')).to.be.false;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log back in user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 200 OK",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Check for the login success message",
											"pm.test(\"Login successful message is correct\", () => {",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Login successful\");",
											"});",
											"",
											"// Check that the token cookie is set",
											"pm.test(\"Token cookie is present\", () => {",
											"    const tokenCookie = pm.cookies.get(\"token\");",
											"    pm.expect(tokenCookie).to.not.be.undefined;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"updated@example.com\",\n    \"password\": \"newpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 200 OK",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"",
											"// Parse the response JSON",
											"const jsonData = pm.response.json();",
											"",
											"// Check for the user deletion success message",
											"pm.test(\"User deletion message is correct\", () => {",
											"    pm.expect(jsonData).to.have.property(\"message\", \"User account deleted successfully\");",
											"});",
											"",
											"// Verify that the token cookie is cleared",
											"pm.test(\"Token cookie is cleared upon user deletion\", () => {",
											"    const tokenCookie = pm.cookies.get(\"token\");",
											"    pm.expect(tokenCookie).to.be.undefined;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized get user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response has correct error message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Access denied. No token provided.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response has correct error message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Access denied. No token provided.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5001"
		},
		{
			"key": "post_id",
			"value": ""
		},
		{
			"key": "event_id",
			"value": ""
		},
		{
			"key": "invitation_id",
			"value": ""
		},
		{
			"key": "notification_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "cleanup_notification_id",
			"value": ""
		},
		{
			"key": "rental_id",
			"value": ""
		},
		{
			"key": "availability_id",
			"value": ""
		}
	]
}